using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using System.Xml;
using TestFormDB.TransferMasterData;

namespace TestFormDB
{
    public partial class ListTable : Form
    {
        public class TableCheck
        {
            public string Table { get; set; }
            public string Condition { get; set; }
        }

        public ListTable()
        {
            InitializeComponent();
            lstwtable.OwnerDraw = true;
        }

        private void btncancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnback_Click(object sender, EventArgs e)
        {
            FormMain formMain = new FormMain();
            Hide();
            formMain.Show();}

        private void btnnext_Click(object sender, EventArgs e)
        {
            List<DataTransfer> data = new List<DataTransfer>();
            data = GetListCheck();
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;

            XmlWriter writer = XmlWriter.Create(Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location) + "\\dataSrcCheck.xml", settings);

            writer.WriteStartDocument();
            writer.WriteComment("This file is generated by the program.");
            writer.WriteStartElement("Root");

            foreach (var item in data)
            {
                if (item.Table.Split(new char[] { ';' }).Length > 1)
                {
                    var table = item.Table.Split(new char[] { ';' });                   
                    var length = table.Length;
                    for (var i = 0; i < length; i++)
                    {
                        writer.WriteStartElement("Function");
                        writer.WriteElementString("Table", table[i]);

                        if (i == 0)
                        {
                            writer.WriteElementString("Condition", item.Condition);                        
                        }
                        else
                        {
                            writer.WriteElementString("Condition", "");
                        }
                        writer.WriteEndElement();
                    }
                }
                else
                {
                    writer.WriteStartElement("Function");
                    writer.WriteElementString("Table", item.Table);
                    writer.WriteElementString("Condition", item.Condition);
                    writer.WriteEndElement();
                }
            }

            writer.WriteElementString("Overwrite", chkoverwrite.Checked.ToString());

            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            writer.Close();
            FrmInfoTransfer frm = new FrmInfoTransfer();
            Hide();
            frm.Show();
        }
     
        private void ListTable_Load(object sender, EventArgs e)
        {
            lstwtable.View = View.Details;
            lstwtable.GridLines = true;
            lstwtable.FullRowSelect = true;
            lstwtable.CheckBoxes = true;

            //Add column header
            lstwtable.Columns.Add("", 0, HorizontalAlignment.Center);
            lstwtable.Columns.Add("Data", 500);

            ListViewItem itm;
            try
            {
                XmlDocument docProcess = new XmlDocument();
                docProcess.Load(Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location) + "\\MappingMasterData.xml");

                var after = docProcess.GetElementsByTagName("Mapping");
                var Table = docProcess.GetElementsByTagName("Function");
                string[] arr = new string[4];
                foreach (XmlNode item in Table)
                {
                    var SrcSQL = item.SelectNodes("Name").Item(0).InnerText;
                    var table = item.SelectNodes("Table").Item(0).InnerText;
                    var condition = item.SelectNodes("Condition").Item(0).InnerText;
                    arr[1] = SrcSQL;
                    arr[2] = table;
                    arr[3] = condition;
                    itm = new ListViewItem(arr);
                    lstwtable.Columns[1].ListView.Items.Add(itm);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void lstwtable_DrawItem(object sender, DrawListViewItemEventArgs e)
        {
            e.DrawDefault = true;
        }

        private void lstwtable_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            e.DrawDefault = true;
        }

        private void lstwtable_DrawColumnHeader(object sender, DrawListViewColumnHeaderEventArgs e)
        {
            if (e.ColumnIndex == 0)
            {
                e.DrawBackground();
                bool value = false;
                try
                {
                    value = Convert.ToBoolean(e.Header.Tag);
                }
                catch (Exception)
                {
                }
                CheckBoxRenderer.DrawCheckBox(e.Graphics, new Point(e.Bounds.Left + 4, e.Bounds.Top + 4),
                    value ? System.Windows.Forms.VisualStyles.CheckBoxState.CheckedNormal :
                    System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);
            }
            else
            {
                e.DrawDefault = true;
            }
        }

        private void lstwtable_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            if (e.Column == 0)
            {
                bool value = false;
                try
                {
                    value = Convert.ToBoolean(this.lstwtable.Columns[e.Column].Tag);
                }
                catch (Exception)
                {
                }
                this.lstwtable.Columns[e.Column].Tag = !value;
                foreach (ListViewItem item in this.lstwtable.Items)
                    item.Checked = !value;

                this.lstwtable.Invalidate();
            }
        }

        private void btnhelp_Click(object sender, EventArgs e)
        {
        }

        private List<DataTransfer> GetListCheck()
        {
            List<DataTransfer> ArrList = new List<DataTransfer>();
            //lstwtable.ItemChecked += new ItemCheckedEventHandler(lstwtable_ItemChecked);

            foreach (ListViewItem item in lstwtable.Items)
            {
                ArrList.Add(new DataTransfer()
                {
                    Table = item.SubItems[2].Text,
                    Condition = item.SubItems[3].Text,
                });
            }
            return ArrList;
        }

        private void lstwtable_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            //List<TableCheck> table = new List<TableCheck>();

            //if ((e.CurrentValue == CheckState.Unchecked))
            //{
            //    table.Add(
            //        new TableCheck()
            //        {
            //            Table = this.lstwtable.Items[e.Index].SubItems[2].Text,
            //            Condition = this.lstwtable.Items[e.Index].SubItems[3].Text
            //        });
            //    //textBox1.Text += this.lstwtable.Items[e.Index].SubItems[2].Text;
            //}
        }

        private void lstwtable_ItemChecked(object sender, ItemCheckedEventArgs e)
        {
            //List<string> text=new List<string>();
            ////GetListCheck(table);
            //foreach (ListViewItem item in lstwtable.CheckedItems)
            //{
            //    textBox1.Text += item.SubItems[2].Text;
            //    text.Add(item.SubItems[2].Text);
            //}
        }

        private void ListTable_FormClosing(object sender, FormClosingEventArgs e)
        {
            DialogResult tl;
            tl = MessageBox.Show("Bạn có muốn hủy thao tác và quay lại màn hình chính", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (tl == DialogResult.Yes)
            {
                FormMain frm = new FormMain();
                Hide();
                frm.Show();
            }
            else
            {
                e.Cancel = true;
            }
        }
    }
}