using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;

namespace TestFormDB.Update_Data
{
    public partial class FrmAdjustData : Form
    {
        List<Detail> detail = new List<Detail>();
        List<DataDetail> data = new List<DataDetail>();
        public FrmAdjustData()
        {
            InitializeComponent();
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            FrmSrcUpdate frm = new FrmSrcUpdate();
            this.Hide();
            frm.Show();
        }

        private void btnNext_Click(object sender, EventArgs e)
        {
            if (cbbtrans.Text == "")
            {
                MessageBox.Show("Bạn chưa chọn Transaction");
                return;
            }
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;

            XmlWriter writer = XmlWriter.Create(Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location) + "\\dataUpdateTemp.xml", settings);

            writer.WriteStartDocument();
            writer.WriteComment("This file is generated by the program.");
            writer.WriteStartElement("Mapping");

            foreach (var item in data)
            {
                if (item.Name == cbbtrans.Text)
                {
                    writer.WriteStartElement("Function");
                    writer.WriteElementString("ID", item.ID);
                    writer.WriteElementString("Name", item.Name);
                    writer.WriteElementString("Table", item.Table);
                    writer.WriteElementString("Condition", item.Condition);
                    writer.WriteElementString("Language", item.Language);
                    foreach (var itemdetail in detail)
                    {
                        if (itemdetail.ID == item.ID)
                        {
                            writer.WriteStartElement("Detail");

                            writer.WriteAttributeString("Ref", itemdetail.ConditionDetail);

                            writer.WriteString(itemdetail.DetailName);
                            writer.WriteEndElement();
                        }
                    }
                    writer.WriteEndElement();
                    break;
                }
            }
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            writer.Close();

            FrmEditDataImport frmEditData = new FrmEditDataImport();
            Hide();
            frmEditData.Show();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void FrmAdjustData_Load(object sender, EventArgs e)
        {
            try
            {
                XmlDocument docProcess = new XmlDocument();
                docProcess.Load(Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location) + "\\dataSrcExportCheck.xml");

                var after = docProcess.GetElementsByTagName("Mapping");
                var Table = docProcess.GetElementsByTagName("Function");
                foreach (XmlNode item in Table)
                {
                    data.Add(new DataDetail
                    {
                        ID = item.SelectNodes("ID").Item(0).InnerText,
                        Name = item.SelectNodes("Name").Item(0).InnerText,
                        Table = item.SelectNodes("Table").Item(0).InnerText,
                        Condition = item.SelectNodes("Condition").Item(0).InnerText,
                        Language = item.SelectNodes("Language").Item(0).InnerText
                    });
                    foreach (XmlNode itemdetail in item.SelectNodes("Detail"))
                    {
                        detail.Add(new Detail
                        {
                            ID = item.SelectNodes("ID").Item(0).InnerText,
                            DetailName = itemdetail.InnerXml,
                            ConditionDetail = itemdetail.Attributes[0].Value
                        });
                    }

                    cbbtrans.Items.Add(item.SelectNodes("Name").Item(0).InnerText);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void FrmAdjustData_FormClosing(object sender, FormClosingEventArgs e)
        {
            DialogResult tl;
            tl = MessageBox.Show("Bạn có muốn hủy thao tác và quay lại màn hình chính", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (tl == DialogResult.Yes)
            {
                FormMain frm = new FormMain();
                Hide();
                frm.Show();
            }
            else
            {
                e.Cancel = true;
            }
        }
    }
}
